package ch.fgcz.proteomics.fdbm;

/**
 * @author Lucas Schmidt
 * @since 2017-09-21
 */

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.jgrapht.GraphPath;

import ch.fgcz.proteomics.dto.MassSpectrometryMeasurement;
import ch.fgcz.proteomics.dto.MassSpectrum;
import ch.fgcz.proteomics.dto.Summary;
import ch.fgcz.proteomics.fdbm.IsotopicClusterGraph;
import ch.fgcz.proteomics.utilities.Sort;

public class Deisotope {
    public MassSpectrometryMeasurement deisotopeMSM(MassSpectrometryMeasurement input, boolean save, String modus, String file) {
        MassSpectrometryMeasurement output = new MassSpectrometryMeasurement(input.getSource() + "_output");

        ScoreConfig config = new ScoreConfig(file);

        for (MassSpectrum ms : input.getMSlist()) { // input.getMSlist().parallelStream().forEach((ms) -> {
            output.getMSlist().add(deisotopeMS(ms, save, modus, config));
        }

        return output;
    }

    public MassSpectrum deisotopeMS(MassSpectrum input, boolean save, String modus, ScoreConfig config) {
        IsotopicMassSpectrum ims = new IsotopicMassSpectrum(input, 0.01);

        List<Double> isotopelist = new ArrayList<>();
        List<Double> mzlist = new ArrayList<>();
        List<Double> intensitylist = new ArrayList<>();
        List<Integer> chargelist = new ArrayList<>();

        List<Double> mzlistnew = new ArrayList<>();

        for (IsotopicSet is : ims.getIsotopicMassSpectrum()) {
            IsotopicClusterGraph icg = new IsotopicClusterGraph(is);

            icg.scoreIsotopicClusterGraph(input.getPeptideMass(), input.getChargeState(), 0.3, new Peaklist(input.getMz(), input.getIntensity()), config);

            GraphPath<IsotopicCluster, Connection> bp = icg.bestPath(getStart(icg), getEnd(icg));

            if (save == true) {
                icg.drawDOTIsotopicClusterGraph(is.getSetID(), input.getId());
            }

            List<Double> clustermz = new ArrayList<>();
            List<Double> clusteri = new ArrayList<>();
            List<Double> clusteriso = new ArrayList<>();
            List<Integer> clustercharge = new ArrayList<>();

            List<Double> clustermznew = new ArrayList<>();

            for (IsotopicCluster cluster : bp.getVertexList()) {
                if (cluster.getIsotopicCluster() != null) {

                    for (Peak p : cluster.getIsotopicCluster()) {
                        clustermznew.add(p.getMz());
                    }

                    aggregation(cluster, modus);

                    int position = 1;
                    for (Peak p : cluster.getIsotopicCluster()) {
                        clustermz.add(p.getMz());
                        clusteri.add(p.getIntensity());
                        clusteriso.add((double) position);
                        clustercharge.add(cluster.getCharge());
                        position++;
                    }
                }
            }

            mzlist.addAll(clustermz);
            intensitylist.addAll(clusteri);
            isotopelist.addAll(clusteriso);
            chargelist.addAll(clustercharge);

            mzlistnew.addAll(clustermznew);
        }

        for (int i = 0; i < input.getMz().size(); i++) {
            if (!mzlistnew.contains(input.getMz().get(i))) {
                mzlist.add(input.getMz().get(i));
                intensitylist.add(input.getIntensity().get(i));
                isotopelist.add(-1.0);
                chargelist.add(-1);
            }
        }

        Sort.keySort(mzlist, mzlist, intensitylist, isotopelist, chargelist);

        return new MassSpectrum(input.getTyp(), input.getSearchEngine(), mzlist, intensitylist, input.getPeptideMass(), input.getRt(), input.getChargeState(), input.getId(), chargelist, isotopelist);
    }

    private IsotopicCluster getStart(IsotopicClusterGraph icg) {
        for (IsotopicCluster e : icg.getIsotopicclustergraph().vertexSet()) {
            if (e.getIsotopicCluster() == null && e.getStatus() == "start") {
                return e;
            }
        }
        return null;
    }

    private IsotopicCluster getEnd(IsotopicClusterGraph icg) {
        for (IsotopicCluster e : icg.getIsotopicclustergraph().vertexSet()) {
            if (e.getIsotopicCluster() == null && e.getStatus() == "end") {
                return e;
            }
        }
        return null;
    }

    private IsotopicCluster aggregation(IsotopicCluster cluster, String modus) {
        if (modus.contains("first")) {
            return cluster.aggregateFirst();
        } else if (modus.contains("last")) {
            return cluster.aggregateLast();
        } else if (modus.contains("mean")) {
            return cluster.aggregateMean();
        } else if (modus.contains("none")) {
            return cluster;
        } else {
            throw new IllegalArgumentException("Modus not found (" + modus + ")");
        }
    }

    public static void main(String[] args) {
        // runtimeBenchmark();

        testDeisotope();
    }

    private static void testDeisotope() {
        String typ = "MS2 Spectrum";
        String searchengine = "mascot";
        double[] mz = { 110.0715485, 110.1648788, 112.0395432, 113.0712204, 114.0746384, 115.05056, 115.9784622, 120.080986, 120.0833893, 121.0843735, 125.7498245, 129.0659332, 129.1023102,
                130.0863342, 130.1057281, 131.0815735, 132.0849609, 132.5098419, 137.0346222, 141.0658417, 143.0816193, 145.0608368, 147.1128235, 149.0233917, 150.0266876, 153.0657654, 157.0970917,
                159.076416, 160.0798035, 162.0875397, 162.0912323, 167.0816345, 170.092392, 171.0762177, 172.8989868, 175.118927, 180.0767212, 185.0920105, 189.1023407, 198.0873413, 199.0907135,
                204.0980682, 205.0570374, 207.1127777, 208.0717316, 210.0866547, 210.7322388, 211.5193329, 212.10289, 214.0822296, 216.0977783, 223.0636444, 224.1031799, 225.0603638, 226.0820923,
                227.0399933, 227.1023407, 228.098175, 230.1135101, 231.1125488, 231.1492462, 232.0926361, 232.2126312, 233.1646729, 235.1072845, 240.09758, 241.129364, 242.1128387, 246.1234741,
                249.098175, 253.0928345, 254.1314087, 254.6329193, 255.1085358, 258.1084595, 259.1398315, 263.1368713, 267.1086426, 268.1119995, 269.1243591, 271.1038513, 273.1199646, 274.1184998,
                276.1701965, 277.0926819, 277.1541138, 278.4438171, 279.108429, 285.1191101, 287.1348877, 289.650177, 292.1772461, 294.1808777, 295.1038513, 295.184082, 296.1346436, 297.1190491,
                299.0617065, 300.133606, 301.0583801, 303.1295166, 310.4591064, 314.1459961, 315.129303, 318.1446228, 318.1605225, 324.1297607, 328.1278992, 331.8494568, 332.1560364, 333.1555786,
                334.114502, 338.1456299, 342.1403198, 343.1411133, 346.176239, 351.1661377, 356.1558228, 357.1579285, 357.6632385, 358.1647949, 360.1513672, 360.6679077, 361.1502075, 363.2023926,
                366.6683655, 368.6846924, 375.1660156, 375.2023926, 379.1607361, 381.2128296, 382.2158813, 387.1657104, 388.1895447, 390.9455261, 395.1658325, 397.1503906, 397.1950684, 397.6967163,
                400.1613159, 403.135437, 403.1973877, 411.1614075, 418.1715698, 420.2235107, 421.1462402, 421.2265015, 426.1759949, 438.2343445, 439.2384644, 443.2040405, 444.1874084, 454.1725464,
                461.2140198, 462.1977844, 471.1980896, 472.2180786, 479.2248535, 482.1990967, 489.2085571, 490.2118835, 490.2296448, 495.2563477, 507.2199402, 507.2555847, 508.2598572, 525.2663574,
                526.2697754, 577.2515259, 578.2937012, 584.8656006, 596.3037109, 597.3069458, 617.3034668, 618.2872925, 635.3146362, 636.3175049, 653.3252563, 654.3284302 };
        double[] intensity = { 6250.6640625, 563.5891113281, 787.7743530273, 42913.109375, 927.4467773438, 2023.1707763672, 529.0408325195, 25228.6796875, 1165.1545410156, 603.5643310547,
                528.4467773438, 7070.5766601563, 31543.533203125, 19388.078125, 833.7221679688, 81864.546875, 3091.2973632813, 582.6003417969, 6660.9750976563, 34947.4921875, 684.2407836914,
                3036.4206542969, 36999.45703125, 2973.7102050781, 829.9125366211, 6804.5180664063, 1259.5620117188, 46302.8125, 2067.9748535156, 1154.1105957031, 765.7245483398, 794.5812988281,
                4291.3037109375, 888.9245605469, 606.1282958984, 766.3591918945, 14302.1279296875, 3288.0661621094, 688.5368652344, 35533.54296875, 2225.658203125, 670.2319335938, 677.4953613281,
                6984.8188476563, 2347.3420410156, 594.0815429688, 2258.9313964844, 568.3290405273, 802.1146850586, 3599.0229492188, 7246.6596679688, 2139.9233398438, 828.2638549805, 884.8049316406,
                1193.3479003906, 566.4050292969, 786.0283813477, 615.2380981445, 1079.8623046875, 1339.6888427734, 806.2881469727, 9631.443359375, 569.907409668, 1065.3564453125, 991.0939331055,
                690.4099731445, 3580.0187988281, 672.0654296875, 845.2703857422, 1281.3441162109, 559.6304931641, 4143.1162109375, 1155.7521972656, 2598.6123046875, 953.2352905273, 3944.8764648438,
                7301.6743164063, 4961.2807617188, 569.8205566406, 2566.8024902344, 795.173828125, 757.6403808594, 3254.8908691406, 7315.53515625, 1220.8388671875, 1115.0716552734, 524.3715820313,
                676.455871582, 2324.4851074219, 808.6432495117, 1269.125, 581.4161376953, 31443.404296875, 2546.380859375, 2911.2058105469, 780.770324707, 738.4011230469, 1135.4598388672,
                1176.7568359375, 3533.0815429688, 2457.2565917969, 562.0629882813, 928.1300048828, 1034.6174316406, 1035.1872558594, 2155.4260253906, 3214.2192382813, 586.0258178711, 545.24609375,
                2240.283203125, 3230.6267089844, 1323.4107666016, 924.3392944336, 8073.1616210938, 767.8354492188, 789.9375610352, 2135.9985351563, 999.5626831055, 642.1485595703, 7692.0913085938,
                1246.6643066406, 4829.984375, 799.643371582, 3193.9008789063, 1350.830078125, 901.1105957031, 687.5123901367, 996.9341430664, 1064.1864013672, 911.1711425781, 16409.24609375,
                1171.5484619141, 960.3439331055, 935.4268188477, 677.4844970703, 657.7783813477, 2241.4836425781, 8700.474609375, 782.1491699219, 686.3291015625, 785.7287597656, 753.0210571289,
                714.055847168, 2145.2751464844, 5911.2006835938, 1220.7615966797, 623.0693969727, 634.6696777344, 33137.39453125, 5135.7211914063, 813.663269043, 1231.4427490234, 933.5162963867,
                3532.599609375, 1009.3364868164, 3219.3342285156, 800.7995605469, 3228.8891601563, 1368.7080078125, 6327.9125976563, 810.8509521484, 1239.9750976563, 791.6758422852, 1281.634765625,
                6519.0903320313, 575.096496582, 65968.4140625, 11777.5908203125, 2284.7736816406, 2809.2331542969, 622.4571533203, 22998.53515625, 3657.8000488281, 1279.3221435547, 1236.6485595703,
                9816.9814453125, 1331.3529052734, 87058.9140625, 21567.640625 };
        double peptidmass = 406.2002;
        double rt = 34.88659;
        int chargestate = 2;
        int id = 0;

        String typ2 = "MS2 Spectrum";
        String searchengine2 = "mascot";
        double[] mz2 = { 110.0715561, 111.8610229, 114.1390686, 120.0810623, 129.0660095, 129.1023407, 130.0863495, 132.0810089, 139.0865326, 140.0706635, 141.0740509, 143.6311035, 144.4211426,
                147.0765533, 147.1128082, 149.071167, 149.0787201, 150.8496857, 151.7207642, 152.4041443, 152.6655426, 158.0813751, 159.0917816, 159.1131744, 167.081604, 168.0655975, 169.0607758,
                169.1337433, 170.0600433, 172.8981781, 175.1192474, 177.5897522, 183.2910461, 184.4230652, 185.0920258, 186.0953522, 187.1441803, 195.0765533, 196.4373932, 197.1284637, 197.7965393,
                201.1235504, 203.1025696, 204.1342926, 207.1127472, 211.4206696, 211.4256287, 212.1028748, 213.0869446, 215.1390839, 217.0818329, 222.1237335, 223.0710297, 225.1237335, 230.1137543,
                231.0972137, 240.0977325, 240.1340332, 240.60849, 241.0817261, 241.100647, 243.1338959, 258.1082458, 258.1444092, 269.2312012, 276.1551514, 280.1652832, 282.4821167, 285.4057312,
                298.1757507, 308.1601563, 323.6738281, 326.1708679, 330.7650757, 352.112793, 368.1928101, 369.1398315, 369.1757507, 371.1920776, 386.2032166, 387.1508179, 387.1869507, 387.2027893,
                387.2068787, 395.2292786, 399.1523132, 404.2136536, 413.0435791, 425.8088989, 429.7384949, 438.2342224, 438.8492432, 439.843811, 459.6753235, 497.2355042, 498.2195129, 498.2379761,
                499.2226868, 515.2456665, 516.2489014, 533.2565918, 534.2587891, 546.1281738, 563.2313843, 610.3203735, 614.8796387, 646.3406372, 647.3439941, 747.3895264, 892.5530396 };
        double[] intensity2 = { 1000.1350097656, 459.3703613281, 519.1496582031, 781.0161132813, 2526.6721191406, 11320.5927734375, 7084.2470703125, 842.3206176758, 1135.3817138672, 18157.3125,
                786.469909668, 490.9208679199, 576.0399780273, 2261.421875, 16663.58203125, 499.9517211914, 688.5201416016, 519.2963256836, 797.7744140625, 481.8589477539, 478.0321044922,
                4551.6142578125, 2674.5727539063, 532.3534545898, 4554.9936523438, 942.9102783203, 630.2772827148, 1151.7127685547, 5868.7631835938, 524.7658081055, 876.7496948242, 563.5301513672,
                583.0883789063, 453.0282592773, 11805.900390625, 505.899017334, 6339.0668945313, 5552.0092773438, 602.1333007813, 980.5944213867, 506.7865905762, 542.5009155273, 4265.900390625,
                2223.9006347656, 661.8003540039, 884.8544311523, 1384.0025634766, 2760.4465332031, 7811.0014648438, 2927.7336425781, 638.9751586914, 696.5787353516, 530.7892456055, 648.5638427734,
                889.94921875, 1170.0031738281, 13165.86328125, 3567.0439453125, 598.9104003906, 2136.6420898438, 550.4777832031, 4788.4853515625, 7577.4145507813, 9951.6845703125, 633.6901245117,
                8566.72265625, 6111.5356445313, 603.5051269531, 547.0169067383, 1030.9359130859, 3526.8361816406, 775.7020874023, 977.0328979492, 573.4454956055, 942.9322509766, 856.3784790039,
                1111.9583740234, 1140.8024902344, 1289.6633300781, 9985.4521484375, 1866.3151855469, 15186.7138671875, 750.4580688477, 782.4721069336, 1077.7072753906, 545.8282470703, 7053.7202148438,
                513.7174682617, 622.5845336914, 553.4197998047, 688.5629272461, 1012.749206543, 1117.6733398438, 527.3670043945, 697.4555664063, 6784.0971679688, 739.5375366211, 874.3876342773,
                24654.7109375, 3577.7976074219, 24185.4765625, 2528.0358886719, 574.4848632813, 647.6321411133, 2600.6940917969, 493.2133178711, 10003.0302734375, 2482.6206054688, 736.8714599609,
                509.7579040527 };
        double peptidmass2 = 438.7188;
        double rt2 = 35.03545;
        int chargestate2 = 2;
        int id2 = 1;

        String typ3 = "MS2 Spectrum";
        String searchengine3 = "mascot";
        double[] mz3 = { 110.071434, 111.1172791, 114.1379471, 115.0867233, 116.0709763, 120.0810165, 129.1023407, 130.0863647, 133.0608063, 136.0757599, 137.1325684, 141.1022949, 142.0866089,
                142.1057892, 143.0815582, 143.1180725, 145.0971985, 147.1128387, 149.0231323, 149.0813293, 153.950592, 155.1178741, 156.1019897, 157.1336212, 161.0919037, 166.08638, 172.9013824,
                173.0922699, 175.1192627, 182.128952, 183.1128235, 184.0970459, 185.164917, 187.1438446, 189.0869904, 193.0972748, 199.0714569, 200.1394196, 201.1234436, 202.1267395, 210.5132599,
                217.0818939, 218.1499176, 218.8685608, 219.1531982, 228.0976715, 229.0282898, 229.118103, 231.3766327, 241.3804626, 243.1742859, 244.0929565, 244.1292114, 246.1555176, 254.1499023,
                255.007843, 257.1898193, 258.0890808, 258.8848572, 260.1241455, 270.1082764, 271.111969, 272.6676941, 272.8900452, 277.4067383, 285.0091858, 288.1187439, 289.1868591, 290.1903687,
                293.122467, 303.1463318, 314.6676025, 321.1767273, 332.3607788, 334.8108215, 340.820343, 341.1454163, 349.6712341, 349.6844482, 359.1559448, 367.1973877, 367.209137, 367.2991333,
                390.234314, 391.2380066, 447.3330994, 487.2503357, 488.235321, 488.2549133, 502.703064, 505.2611084, 506.2651672, 521.2680664, 544.3269043, 545.3035889, 615.1711426, 655.3071899 };
        double[] intensity3 = { 554.5115356445, 576.2714233398, 470.5877075195, 831.346862793, 808.5812988281, 540.8423461914, 15454.1044921875, 10687.373046875, 2562.8276367188, 985.1844482422,
                5154.5366210938, 11838.80078125, 746.5007324219, 590.8298339844, 2232.1176757813, 2862.2277832031, 999.6495361328, 20458.943359375, 549.176574707, 564.7764282227, 541.6581420898,
                2744.7907714844, 13228.37109375, 1072.2976074219, 668.5700073242, 1015.8220214844, 566.4951171875, 3130.7785644531, 5293.4462890625, 984.9155883789, 10520.90234375, 2768.6892089844,
                2203.5717773438, 578.719909668, 2560.7993164063, 580.1266479492, 11263.375, 4808.3188476563, 122865.515625, 7319.7158203125, 2671.2126464844, 5787.3247070313, 24145.658203125,
                560.5859375, 893.0471801758, 981.86328125, 599.716003418, 3674.5551757813, 631.608215332, 567.0170288086, 7594.8212890625, 840.05859375, 791.4499511719, 533.7921142578, 714.3071289063,
                2784.4916992188, 2421.3828125, 539.7557373047, 665.4076538086, 787.3020629883, 22507.0078125, 1141.7131347656, 653.4030151367, 780.8794555664, 521.9017944336, 652.1410522461,
                13041.5927734375, 12533.13671875, 640.3876953125, 887.7508544922, 693.4885864258, 552.3706665039, 659.1276245117, 503.3168945313, 586.6461181641, 1149.9792480469, 1115.6361083984,
                626.9268188477, 555.3795166016, 2641.4448242188, 910.6457519531, 758.4725341797, 8677.2880859375, 11298.2587890625, 1102.0684814453, 550.0299072266, 4999.42578125, 900.1571044922,
                611.5407104492, 591.0953369141, 31726.78125, 5554.0678710938, 1095.4444580078, 889.14453125, 989.8300170898, 472.4118347168, 565.1219482422 };
        double peptidmass3 = 367.1894;
        double rt3 = 35.17022;
        int chargestate3 = 2;
        int id3 = 2;

        String s = "TesterinoData.RData";
        MassSpectrometryMeasurement msm = new MassSpectrometryMeasurement(s);
        msm.addMS(typ, searchengine, mz, intensity, peptidmass, rt, chargestate, id);
        msm.addMS(typ2, searchengine2, mz2, intensity2, peptidmass2, rt2, chargestate2, id2);
        msm.addMS(typ3, searchengine3, mz3, intensity3, peptidmass3, rt3, chargestate3, id3);

        System.out.println("Input:");
        for (MassSpectrum x : msm.getMSlist()) {
            for (int y = 0; y < x.getMz().size(); y++) {
                System.out.print("M: " + x.getMz().get(y) + ", ");
            }
            System.out.println();
        }
        System.out.println();

        Deisotope deiso = new Deisotope();

        System.out.println("Output:");
        for (MassSpectrum x : deiso.deisotopeMSM(msm, true, "mean", "AminoAcidMasses.ini").getMSlist()) {
            for (int y = 0; y < x.getMz().size(); y++) {
                System.out.print("M: " + x.getMz().get(y) + ", ");
                System.out.print("Z: " + x.getCharge().get(y) + ", ");
                System.out.print("I: " + x.getIsotope().get(y) + ", ");
            }
            System.out.println();
        }
    }

    private static void runtimeBenchmark() {
        String s = "TesterinoData.RData";
        MassSpectrometryMeasurement msm = new MassSpectrometryMeasurement(s);

        for (int i = 0; i < 10; i++) {
            String typ = "MS2 Spectrum";
            String searchengine = "mascot";

            List<Double> mzlist = new ArrayList<>();
            List<Double> intensitylist = new ArrayList<>();

            int x = 25;
            for (double j = 125; j < 300; j++) {
                if (j / 5 == x) {
                    mzlist.add(j + 2);
                    x++;
                } else {
                    mzlist.add(j);
                }
                intensitylist.add(j * 1.24);
            }

            Collections.sort(mzlist);

            double[] mz = mzlist.stream().mapToDouble(Double::doubleValue).toArray();
            double[] intensity = intensitylist.stream().mapToDouble(Double::doubleValue).toArray();

            double peptidmass = i * 20.343;
            double rt = i * 30.2434;
            int chargestate = 2;
            int id = i;
            msm.addMS(typ, searchengine, mz, intensity, peptidmass, rt, chargestate, id);
        }

        long startTime = System.currentTimeMillis();

        Deisotope deiso = new Deisotope();
        System.out.println(Summary.makeSummary(deiso.deisotopeMSM(msm, false, "first", "AminoAcidMasses.ini")));

        long endTime = System.currentTimeMillis();
        System.out.println("Total execution time: " + (endTime - startTime) + "ms");
    }
}