package ch.fgcz.proteomics.mspy;
/**
 * @author Lucas Schmidt
 * @since 2017-08-29
 */

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Deisotope {
    public static final double ISOTOPE_DISTANCE = 1.00287;
    public static final double ELECTRON_MASS = 0.00054857990924;
    public static final double H_MASS = 1.008;

    public static List<Peaklist.Peak> deisotope(List<Peaklist.Peak> peaklist, int maxcharge, double mztolerance, double inttolerance, double isotopeshift) {
        List<Integer> charges = new ArrayList<>();

        for (Peaklist.Peak p : peaklist) {
            p.setCharge(0);
            p.setIsotope(0);
        }

        if (maxcharge < 0) {
            for (int i = 1; i <= Math.abs(maxcharge) + 1; i++) {
                charges.add(-i);
            }
        } else {
            for (int i = 1; i <= maxcharge + 1; i++) {
                charges.add(i);
            }
        }
        Collections.reverse(charges);

        int maxindex = peaklist.size();

        int x = 0;
        for (Peaklist.Peak parent : peaklist) {
            if (parent.getIsotope() != 0) {
                continue;
            }

            for (int z : charges) {
                List<Peaklist.Peak> cluster = new ArrayList<>();
                cluster.add(parent); // NOT CLEAR

                double difference = (ISOTOPE_DISTANCE + isotopeshift) / Math.abs(z);
                int y = 1;
                while (x + y < maxindex) {
                    double mzerror = (peaklist.get(x + y).getMz() - cluster.get(cluster.size() - 1).getMz() - difference);

                    if (Math.abs(mzerror) <= mztolerance) {
                        cluster.add(peaklist.get(x + y));
                    } else if (mzerror > mztolerance) {
                        break;
                    }
                    y++;
                }

                if (cluster.size() == 1) {
                    continue;
                }

                int mass = Math.min(15000, (int) calculateMass(parent.getMz(), 0, z)) / 200; // NOT CLEAR

                List<Double> pattern = initPattern(mass);

                int lim = 0;

                for (double p : pattern) {
                    if (p >= 0.33) {
                        lim++;
                    }
                }

                if (cluster.size() < lim && Math.abs(z) > 1) {
                    continue;
                }

                boolean valid = true;
                int isotope = 1;
                int limit = Math.min(pattern.size(), cluster.size());

                while (isotope < limit) {
                    double inttheoretical = (cluster.get(isotope - 1).getIntensity() / pattern.get(isotope - 1)) * pattern.get(isotope);
                    double interror = cluster.get(isotope).getIntensity() - inttheoretical;

                    if (Math.abs(interror) <= (inttheoretical * inttolerance)) {
                        cluster.get(isotope).setIsotope(isotope);
                        cluster.get(isotope).setCharge(z);
                    } else if (interror > 0) {
                    } else if (interror < 0 && isotope == 1) {
                        valid = false;
                        break;
                    }

                    isotope++;
                }
                if (valid) {
                    parent.setIsotope(0);
                    parent.setCharge(z);
                }

                // for (Peak i : cluster) {
                // System.out.println(x + ". " + i.toString());
                // }
            }
            x++;
        }

        return peaklist;
    }

    private static double calculateMass(double mass, int charge, int currentcharge) { // NOT CLEAR
        int agentcharge = 1;
        double agentmass = H_MASS;

        double agentcount1 = currentcharge / agentcharge;
        agentmass = agentmass - agentcharge * ELECTRON_MASS;
        // System.out.println(agentmass);

        if (currentcharge != 0) {
            mass = mass * Math.abs(currentcharge) - agentmass * agentcount1;
        }

        if (charge == 0) {
            // System.out.println(" MASS" + mass);
            return mass;
        }

        double agentcount2 = charge / agentcharge;
        // System.out.println((mass + agentmass * agentcount2) / Math.abs(c));
        return (mass + agentmass * agentcount2) / Math.abs(charge);
    }

    public static void main(String[] args) {
        int c = 2;
        double iso = 0;

        int spectrum = 2;

        switch (spectrum) {
        case 1:
            double[] mza = { 110.0715485, 110.1648788, 112.0395432, 113.0712204, 114.0746384, 115.05056, 115.9784622, 120.080986, 120.0833893, 121.0843735, 125.7498245, 129.0659332, 129.1023102,
                    130.0863342, 130.1057281, 131.0815735, 132.0849609, 132.5098419, 137.0346222, 141.0658417, 143.0816193, 145.0608368, 147.1128235, 149.0233917, 150.0266876, 153.0657654,
                    157.0970917, 159.076416, 160.0798035, 162.0875397, 162.0912323, 167.0816345, 170.092392, 171.0762177, 172.8989868, 175.118927, 180.0767212, 185.0920105, 189.1023407, 198.0873413,
                    199.0907135, 204.0980682, 205.0570374, 207.1127777, 208.0717316, 210.0866547, 210.7322388, 211.5193329, 212.10289, 214.0822296, 216.0977783, 223.0636444, 224.1031799, 225.0603638,
                    226.0820923, 227.0399933, 227.1023407, 228.098175, 230.1135101, 231.1125488, 231.1492462, 232.0926361, 232.2126312, 233.1646729, 235.1072845, 240.09758, 241.129364, 242.1128387,
                    246.1234741, 249.098175, 253.0928345, 254.1314087, 254.6329193, 255.1085358, 258.1084595, 259.1398315, 263.1368713, 267.1086426, 268.1119995, 269.1243591, 271.1038513, 273.1199646,
                    274.1184998, 276.1701965, 277.0926819, 277.1541138, 278.4438171, 279.108429, 285.1191101, 287.1348877, 289.650177, 292.1772461, 294.1808777, 295.1038513, 295.184082, 296.1346436,
                    297.1190491, 299.0617065, 300.133606, 301.0583801, 303.1295166, 310.4591064, 314.1459961, 315.129303, 318.1446228, 318.1605225, 324.1297607, 328.1278992, 331.8494568, 332.1560364,
                    333.1555786, 334.114502, 338.1456299, 342.1403198, 343.1411133, 346.176239, 351.1661377, 356.1558228, 357.1579285, 357.6632385, 358.1647949, 360.1513672, 360.6679077, 361.1502075,
                    363.2023926, 366.6683655, 368.6846924, 375.1660156, 375.2023926, 379.1607361, 381.2128296, 382.2158813, 387.1657104, 388.1895447, 390.9455261, 395.1658325, 397.1503906,
                    397.1950684, 397.6967163, 400.1613159, 403.135437, 403.1973877, 411.1614075, 418.1715698, 420.2235107, 421.1462402, 421.2265015, 426.1759949, 438.2343445, 439.2384644, 443.2040405,
                    444.1874084, 454.1725464, 461.2140198, 462.1977844, 471.1980896, 472.2180786, 479.2248535, 482.1990967, 489.2085571, 490.2118835, 490.2296448, 495.2563477, 507.2199402,
                    507.2555847, 508.2598572, 525.2663574, 526.2697754, 577.2515259, 578.2937012, 584.8656006, 596.3037109, 597.3069458, 617.3034668, 618.2872925, 635.3146362, 636.3175049,
                    653.3252563, 654.3284302 };
            double[] ia = { 6250.6640625, 563.5891113281, 787.7743530273, 42913.109375, 927.4467773438, 2023.1707763672, 529.0408325195, 25228.6796875, 1165.1545410156, 603.5643310547, 528.4467773438,
                    7070.5766601563, 31543.533203125, 19388.078125, 833.7221679688, 81864.546875, 3091.2973632813, 582.6003417969, 6660.9750976563, 34947.4921875, 684.2407836914, 3036.4206542969,
                    36999.45703125, 2973.7102050781, 829.9125366211, 6804.5180664063, 1259.5620117188, 46302.8125, 2067.9748535156, 1154.1105957031, 765.7245483398, 794.5812988281, 4291.3037109375,
                    888.9245605469, 606.1282958984, 766.3591918945, 14302.1279296875, 3288.0661621094, 688.5368652344, 35533.54296875, 2225.658203125, 670.2319335938, 677.4953613281, 6984.8188476563,
                    2347.3420410156, 594.0815429688, 2258.9313964844, 568.3290405273, 802.1146850586, 3599.0229492188, 7246.6596679688, 2139.9233398438, 828.2638549805, 884.8049316406,
                    1193.3479003906, 566.4050292969, 786.0283813477, 615.2380981445, 1079.8623046875, 1339.6888427734, 806.2881469727, 9631.443359375, 569.907409668, 1065.3564453125, 991.0939331055,
                    690.4099731445, 3580.0187988281, 672.0654296875, 845.2703857422, 1281.3441162109, 559.6304931641, 4143.1162109375, 1155.7521972656, 2598.6123046875, 953.2352905273,
                    3944.8764648438, 7301.6743164063, 4961.2807617188, 569.8205566406, 2566.8024902344, 795.173828125, 757.6403808594, 3254.8908691406, 7315.53515625, 1220.8388671875, 1115.0716552734,
                    524.3715820313, 676.455871582, 2324.4851074219, 808.6432495117, 1269.125, 581.4161376953, 31443.404296875, 2546.380859375, 2911.2058105469, 780.770324707, 738.4011230469,
                    1135.4598388672, 1176.7568359375, 3533.0815429688, 2457.2565917969, 562.0629882813, 928.1300048828, 1034.6174316406, 1035.1872558594, 2155.4260253906, 3214.2192382813,
                    586.0258178711, 545.24609375, 2240.283203125, 3230.6267089844, 1323.4107666016, 924.3392944336, 8073.1616210938, 767.8354492188, 789.9375610352, 2135.9985351563, 999.5626831055,
                    642.1485595703, 7692.0913085938, 1246.6643066406, 4829.984375, 799.643371582, 3193.9008789063, 1350.830078125, 901.1105957031, 687.5123901367, 996.9341430664, 1064.1864013672,
                    911.1711425781, 16409.24609375, 1171.5484619141, 960.3439331055, 935.4268188477, 677.4844970703, 657.7783813477, 2241.4836425781, 8700.474609375, 782.1491699219, 686.3291015625,
                    785.7287597656, 753.0210571289, 714.055847168, 2145.2751464844, 5911.2006835938, 1220.7615966797, 623.0693969727, 634.6696777344, 33137.39453125, 5135.7211914063, 813.663269043,
                    1231.4427490234, 933.5162963867, 3532.599609375, 1009.3364868164, 3219.3342285156, 800.7995605469, 3228.8891601563, 1368.7080078125, 6327.9125976563, 810.8509521484,
                    1239.9750976563, 791.6758422852, 1281.634765625, 6519.0903320313, 575.096496582, 65968.4140625, 11777.5908203125, 2284.7736816406, 2809.2331542969, 622.4571533203, 22998.53515625,
                    3657.8000488281, 1279.3221435547, 1236.6485595703, 9816.9814453125, 1331.3529052734, 87058.9140625, 21567.640625 };

            for (int i = 0; i < mza.length; i++) {
                Peaklist.createPeak(mza[i], ia[i], c, iso);
            }
            break;
        case 2:
            double[] mza2 = { 120.080887, 121.028519, 121.101296, 122.081291, 122.104752, 123.04419, 123.080589, 123.116989, 124.047546, 125.0, 125.059845, 125.096024, 125.132721, 125.836716,
                    126.055061, 127.039085, 127.075485, 128.078857, 128.963593, 129.054642, 129.065994, 129.102341, 130.086319, 130.099182, 130.105652, 130.97905, 131.070373, 131.089691, 131.117996,
                    131.166504, 133.086014, 133.101257, 133.469589, 134.044678, 136.075684, 136.953247, 137.059723, 137.096054, 139.039047, 139.073227, 139.075333, 139.086578, 139.111786, 140.248672,
                    140.984467, 141.000519, 141.054504, 141.065842, 141.090942, 143.070297, 143.106827, 145.049622, 145.101059, 145.122467, 146.973862, 147.065323, 147.080261, 147.112763, 149.023315,
                    149.096344, 149.961014, 151.075455, 151.096695, 151.111832, 151.976593, 153.054748, 153.090988, 153.127426, 155.070175, 155.106705, 156.746353, 156.994827, 157.086029, 157.122055,
                    159.010941, 159.065201, 159.275482, 161.096069, 161.132477, 162.423615, 162.968994, 162.973465, 163.028015, 163.038879, 163.075302, 163.111618, 163.132675, 163.148178, 163.976547,
                    164.000366, 165.091126, 165.127228, 165.992538, 166.923721, 167.034058, 167.049393, 167.070221, 167.106567, 169.049423, 169.085846, 169.122055, 169.157578, 170.002441, 171.137894,
                    171.981644, 172.779892, 173.080902, 173.11705, 173.153717, 175.060013, 175.111725, 175.118805, 175.132629, 176.98465, 177.054443, 177.09111, 178.167557, 179.10672, 180.979813,
                    181.085831, 181.122208, 181.9328, 183.101593, 183.17453, 183.981735, 184.14563, 185.080795, 185.997436, 186.912338, 187.096649, 187.132721, 188.013092, 189.658554, 189.992096,
                    190.052567, 191.106537, 192.213654, 193.085907, 193.122482, 193.80159, 194.997971, 195.065018, 195.101578, 197.080856, 197.117386, 197.128388, 197.164749, 198.033585, 198.989883,
                    199.006103, 199.180481, 201.02124, 201.043167, 201.112152, 201.992233, 204.603638, 205.987076, 207.016174, 207.101486, 209.081009, 209.11705, 210.954224, 211.096405, 211.132599,
                    212.012878, 213.075546, 213.112061, 214.028549, 215.069519, 215.091248, 216.979706, 217.000473, 217.07016, 217.106583, 217.122742, 217.13353, 217.142685, 219.031509, 219.173935,
                    220.002686, 222.00589, 222.021973, 222.160065, 224.965439, 225.112045, 225.11731, 225.118317, 225.123123, 226.028473, 226.96286, 227.127701, 227.200226, 228.007919, 229.106979,
                    230.023636, 232.002564, 234.951752, 235.096451, 235.132873, 237.111832, 237.148422, 239.186478, 239.996445, 240.016327, 240.170502, 241.451202, 242.023315, 242.995804, 243.054428,
                    243.122482, 244.92273, 247.106155, 247.241989, 247.909775, 249.024658, 249.959, 253.037598, 253.106857, 253.143249, 255.085998, 255.881103, 257.196991, 259.075653, 259.909668,
                    260.033935, 260.196533, 260.245239, 261.889282, 261.909302, 263.079956, 263.904694, 264.904724, 267.969482, 270.01825, 270.028748, 271.117126, 271.153259, 271.241638, 273.096405,
                    273.132996, 273.168945, 275.20755, 278.027069, 280.186493, 282.915314, 283.875946, 287.905243, 288.028809, 288.039551, 288.065033, 288.083984, 288.239929, 288.955139, 288.970184,
                    289.059082, 289.127289, 289.154083, 289.215454, 289.25235, 289.288666, 292.08078, 297.308014, 298.194183, 306.039459, 306.084686, 306.094208, 310.21225, 324.915649, 343.028491,
                    364.280182, 369.224121, 370.281311, 376.671631, 377.527008, 388.291565, 388.291735, 419.239746, 458.728516, 466.000018, 466.302948, 482.292206, 483.331268, 483.364886, 484.312836,
                    501.375353, 501.375549, 511.96637, 516.292419, 563.698364 };
            double[] ia2 = { 862.5, 137.3, 487.6, 242.7, 155.7, 390.9, 3036.0, 875.9, 218.9, 132.6, 1236.0, 373.0, 136.4, 135.0, 126.8, 1077.0, 2133.0, 180.3, 151.9, 892.2, 1493.0, 44080.0, 11680.0,
                    262.6, 1971.0, 233.9, 834.3, 356.5, 126.9, 117.4, 205.5, 301.0, 128.4, 134.7, 189.8, 193.8, 407.2, 2042.0, 308.0, 112.9, 1432.0, 218.5, 311.2, 118.6, 340.0, 149.6, 1261.0, 1122.0,
                    425.5, 1097.0, 203.2, 365.0, 286.0, 195.8, 204.0, 299.9, 229.1, 18870.0, 6068.0, 292.8, 191.6, 989.1, 187.0, 313.1, 368.4, 377.3, 1205.0, 196.6, 899.7, 2021.0, 180.2, 190.0, 354.4,
                    174.4, 298.2, 429.3, 132.3, 1755.0, 880.3, 159.0, 177.9, 216.5, 187.1, 9683.0, 243.0, 186.9, 291.0, 238.5, 462.7, 198.6, 2045.0, 262.5, 172.9, 165.3, 216.9, 206.1, 3020.0, 833.6,
                    433.3, 5020.0, 206.9, 142.5, 148.9, 1979.0, 263.6, 142.0, 1202.0, 134.0, 364.5, 228.1, 158.2, 160.4, 145.8, 266.9, 200.1, 233.4, 146.0, 448.3, 285.9, 400.7, 833.1, 225.5, 3863.0,
                    172.4, 187.0, 146.8, 6973.0, 291.3, 145.4, 1150.0, 914.3, 168.4, 163.7, 235.0, 208.9, 382.7, 139.5, 921.0, 181.0, 149.5, 209.5, 287.3, 1177.0, 1113.0, 497.1, 19020.0, 395.7, 332.1,
                    2238.0, 994.2, 230.3, 834.5, 348.1, 263.9, 257.8, 151.3, 295.0, 182.3, 1282.0, 225.2, 1234.0, 311.1, 1106.0, 285.3, 829.0, 345.4, 2124.0, 1031.0, 207.4, 821.8, 201.0, 369.3, 299.0,
                    330.0, 171.8, 254.8, 189.2, 1001.0, 734.6, 1015.0, 1101.0, 489.4, 264.4, 366.1, 4418.0, 296.9, 228.9, 2605.0, 412.7, 271.3, 1418.0, 1775.0, 171.2, 328.8, 467.6, 268.0, 420.6,
                    509.9, 304.5, 207.2, 192.2, 209.6, 229.2, 1945.0, 1160.0, 174.0, 351.3, 813.0, 228.6, 5546.0, 313.4, 220.8, 1223.0, 219.4, 217.3, 206.6, 264.2, 6072.0, 475.4, 366.2, 1447.0,
                    6443.0, 199.9, 1978.0, 2218.0, 1075.0, 1171.0, 310.6, 259.2, 188.4, 469.9, 1502.0, 933.0, 2033.0, 383.8, 3674.0, 388.7, 939.7, 503.1, 1124.0, 324.1, 21790.0, 268.0, 207.8, 250.9,
                    404.5, 305.0, 2853.0, 352.7, 196.4, 337.2, 245.8, 3540.0, 1401.0, 866.2, 2506.0, 415.9, 797.6, 1135.0, 475.4, 259.7, 203.4, 1686.0, 1220.0, 234.6, 420.0, 1050.0, 287.0, 400.8,
                    197.1, 388.0, 502.6, 202.8, 248.3, 7071.0, 2543.0, 440.5, 234.2, 191.8, 272.1, 274.0, 224.1, 6633.0, 11750.0, 934.2, 237.7, 231.5, 363.3, 255.5 };

            for (int i = 0; i < mza2.length; i++) {
                Peaklist.createPeak(mza2[i], ia2[i], c, iso);
            }
            break;
        case 3:
            double[] mza3 = { 120.09343, 121.007927, 121.02877, 121.065079, 121.101509, 122.073021, 122.104835, 123.023514, 123.042084, 123.044365, 123.080719, 123.117142, 124.084068, 124.120613,
                    124.582512, 125.059998, 125.09639, 125.774986, 126.063271, 126.067749, 127.009399, 127.03907, 127.073456, 127.075554, 127.111969, 129.018448, 129.054855, 129.07016, 129.091232,
                    129.694107, 129.971497, 131.028473, 131.049622, 131.062912, 131.07048, 131.085693, 133.086121, 133.101303, 135.044189, 137.039032, 137.05983, 137.096252, 137.132462, 138.004349,
                    139.039123, 139.073441, 139.075485, 141.054825, 141.09111, 143.106979, 145.049713, 145.101379, 145.122482, 146.575394, 147.023377, 147.06543, 147.080673, 147.116974, 149.023468,
                    149.039062, 149.059982, 149.096329, 149.132721, 150.067719, 151.096649, 151.111969, 151.976822, 153.054779, 153.091049, 155.01059, 155.07045, 155.106766, 157.049744, 157.08606,
                    157.122467, 159.065262, 159.116974, 160.039413, 161.05986, 161.081085, 161.096237, 161.132797, 163.039062, 163.075455, 163.132873, 163.148148, 165.091186, 165.127762, 165.680374,
                    167.033997, 167.049698, 169.086014, 169.122406, 171.06546, 171.101654, 171.117127, 171.138138, 173.059753, 173.077988, 173.081604, 173.117508, 173.132721, 175.027817, 175.054672,
                    175.096344, 175.099686, 175.111923, 175.118622, 176.985001, 177.112274, 177.164185, 179.070785, 179.143112, 181.049561, 181.085998, 182.469925, 183.10173, 183.138458, 183.174576,
                    185.036987, 185.081085, 185.117493, 185.132629, 185.997284, 187.111893, 187.133148, 187.14856, 189.044022, 189.06662, 189.127731, 189.992401, 191.070831, 191.076645, 191.106842,
                    191.143143, 193.065323, 193.122345, 195.102051, 195.122909, 197.117401, 197.997559, 199.097671, 201.090988, 201.112213, 201.127472, 201.16394, 201.992188, 203.021896, 203.083572,
                    203.106659, 203.747086, 205.086105, 205.122574, 207.101456, 207.138138, 207.174377, 208.054779, 208.109558, 209.011597, 209.153717, 213.112213, 215.143112, 215.179779, 217.085709,
                    217.092087, 217.104981, 217.122772, 219.032135, 219.065842, 219.080917, 219.101837, 219.115311, 219.137924, 219.174454, 219.96669, 221.117325, 221.138428, 225.091415, 226.119873,
                    226.963257, 227.083557, 227.127853, 227.200561, 229.037064, 229.049988, 229.074646, 229.106934, 229.122406, 231.101379, 231.122864, 231.138412, 235.123154, 235.132507, 235.169571,
                    237.148727, 239.148941, 241.12854, 243.053787, 243.120422, 243.138214, 243.174515, 244.547302, 245.094132, 247.06105, 247.094467, 247.132706, 247.169662, 247.242218, 249.109863,
                    249.148651, 250.028793, 252.92807, 253.085998, 253.143509, 255.078613, 255.101654, 255.159195, 255.880936, 257.069244, 257.877106, 259.080444, 259.115204, 259.910309, 260.245331,
                    261.076233, 261.10202, 261.109345, 261.1185, 261.147888, 261.184906, 261.889404, 263.107117, 263.141937, 263.164001, 263.905518, 265.143219, 265.164825, 265.894287, 265.9021,
                    265.908264, 267.053131, 267.120026, 267.970001, 268.959442, 270.378235, 271.096893, 271.132965, 271.154083, 271.169403, 271.181183, 271.205627, 271.242004, 272.112976, 272.900085,
                    273.075775, 273.088806, 273.133362, 274.879333, 276.101959, 279.111603, 283.175262, 283.876068, 283.904785, 283.91214, 285.091644, 285.100281, 287.134295, 287.146515, 287.146716,
                    288.917877, 289.095642, 289.106171, 289.13327, 289.142883, 289.164642, 289.179779, 289.21698, 289.252685, 289.953888, 291.099152, 291.25351, 293.225342, 303.141663, 306.139801,
                    306.16922, 306.206757, 306.25116, 306.264038, 308.900055, 312.041901, 324.916718, 327.200714, 330.977831, 331.172607, 331.173022, 345.894409, 347.167969, 349.171661, 349.18335,
                    351.159576, 351.441956, 375.186877, 375.198761, 375.19945, 377.343384, 384.144806, 391.094788, 391.193573, 393.209503, 395.185547, 398.670136, 414.059601, 419.21303, 419.226013,
                    435.220978, 437.235992, 463.238604, 463.251679, 477.223236, 479.246429, 481.262329, 485.767242, 494.093262, 499.817322, 521.47229, 523.272583, 525.288635, 540.577026, 542.531982,
                    569.301562, 616.501221 };
            double[] ia3 = { 142.6, 1643.0, 182.3, 976.1, 2492.0, 173.4, 227.2, 1200.0, 321.6, 542.4, 12570.0, 1696.0, 1345.0, 265.9, 152.2, 5259.0, 2885.0, 149.0, 273.7, 1786.0, 169.9, 190.3, 142.9,
                    1486.0, 203.2, 311.1, 1335.0, 158.0, 1088.0, 146.1, 233.4, 145.8, 215.2, 156.9, 3237.0, 388.9, 48910.0, 1904.0, 264.0, 508.9, 1331.0, 3701.0, 227.2, 133.8, 433.6, 129.0, 1875.0,
                    356.9, 2821.0, 502.2, 222.2, 396.0, 329.7, 147.3, 1275.0, 317.8, 540.6, 1024.0, 6419.0, 2960.0, 390.4, 1489.0, 944.9, 1310.0, 2192.0, 2974.0, 149.7, 898.9, 4283.0, 352.7, 1524.0,
                    1643.0, 214.9, 2803.0, 991.2, 323.3, 884.6, 182.0, 397.2, 190.7, 2660.0, 1340.0, 12240.0, 339.8, 438.9, 306.7, 2148.0, 955.5, 183.1, 380.8, 530.7, 6366.0, 334.1, 196.8, 1860.0,
                    196.4, 1380.0, 184.5, 1640.0, 417.8, 969.6, 512.7, 228.5, 514.2, 2416.0, 176.0, 538.5, 189.5, 182.9, 24630.0, 290.1, 229.0, 248.4, 166.5, 434.1, 171.2, 8038.0, 287.3, 555.2, 269.7,
                    1221.0, 2164.0, 328.4, 271.1, 886.8, 474.9, 294.4, 373.3, 260.8, 462.9, 453.2, 376.0, 169.2, 1282.0, 204.2, 31980.0, 1709.0, 439.0, 1812.0, 1477.0, 227.2, 247.8, 237.6, 321.9,
                    265.1, 285.9, 220.1, 196.6, 206.1, 272.4, 169.4, 345.0, 469.5, 359.1, 523.7, 197.4, 330.5, 858.0, 244.2, 884.7, 2432.0, 386.6, 349.1, 171.8, 315.2, 482.8, 270.5, 226.4, 218.9,
                    14430.0, 200.0, 436.8, 308.0, 898.3, 305.7, 336.6, 6012.0, 239.7, 241.9, 208.9, 255.1, 1271.0, 1722.0, 222.3, 255.3, 389.1, 214.0, 1484.0, 441.1, 549.7, 294.0, 259.3, 337.6, 304.3,
                    994.7, 2719.0, 522.2, 289.6, 200.2, 1228.0, 354.2, 206.9, 1291.0, 242.6, 1247.0, 1079.0, 228.3, 1093.0, 2679.0, 351.8, 252.2, 232.7, 356.7, 904.7, 239.1, 356.7, 1099.0, 2106.0,
                    318.4, 201.0, 342.2, 444.4, 1024.0, 276.1, 215.1, 1612.0, 518.8, 479.1, 1292.0, 412.5, 1064.0, 17150.0, 210.3, 251.0, 402.6, 379.6, 552.8, 1636.0, 2059.0, 220.5, 268.0, 211.6,
                    303.6, 1160.0, 282.5, 399.0, 515.0, 5013.0, 331.7, 224.7, 356.7, 501.9, 1219.0, 248.6, 500.3, 1509.0, 6855.0, 234.8, 250.3, 262.6, 9230.0, 1144.0, 494.2, 265.7, 465.1, 284.2,
                    1233.0, 1089.0, 7090.0, 399.5, 366.5, 454.9, 482.6, 3192.0, 347.8, 1684.0, 367.6, 1142.0, 541.0, 878.3, 292.0, 196.4, 482.6, 2200.0, 364.3, 1857.0, 364.4, 351.8, 3942.0, 223.4,
                    287.4, 471.3, 208.3, 1692.0, 5183.0, 223.3, 1126.0, 535.1, 3705.0, 4498.0, 240.9, 2796.0, 1231.0, 2039.0, 237.4, 230.9, 248.7, 1995.0, 24280.0, 1160.0, 218.6, 256.0, 3407.0, 489.1,
                    1838.0, 85750.0, 1698.0, 980.3, 214.3, 1303.0, 144800.0, 242.8, 307.8, 260.1, 230.1, 444.6, 77980.0, 256.3, 252.1, 2610.0, 221.5 };

            for (int i = 0; i < mza3.length; i++) {
                Peaklist.createPeak(mza3[i], ia3[i], c, iso);
            }

            break;
        }

        List<Peaklist.Peak> plist = deisotope(Peaklist.peaklist, 2, 0.15, 0.5, 0.0);

        int size = 0;
        for (Peaklist.Peak p : plist) {
            if (p.getIsotope() != 0) {
                System.out.println("MZ: " + p.getMz() + ", INTENSITY:" + p.getIntensity() + ", ISOTOPE:" + p.getIsotope());
                size++;
            }
        }
        System.out.println(size + " " + Peaklist.peaklist.size());
    }

    private static List<Double> initPattern(int mass) {
        List<List<Double>> patternLookupTable = new ArrayList<>();

        patternLookupTable.add(Arrays.asList(1.000, 0.059, 0.003));
        patternLookupTable.add(Arrays.asList(1.000, 0.122, 0.013));
        patternLookupTable.add(Arrays.asList(1.000, 0.241, 0.040, 0.005));
        patternLookupTable.add(Arrays.asList(1.000, 0.303, 0.059, 0.008));
        patternLookupTable.add(Arrays.asList(1.000, 0.426, 0.109, 0.020, 0.003));
        patternLookupTable.add(Arrays.asList(1.000, 0.533, 0.166, 0.038, 0.006));
        patternLookupTable.add(Arrays.asList(1.000, 0.655, 0.244, 0.066, 0.014, 0.002));
        patternLookupTable.add(Arrays.asList(1.000, 0.786, 0.388, 0.143, 0.042, 0.009, 0.001));
        patternLookupTable.add(Arrays.asList(1.000, 0.845, 0.441, 0.171, 0.053, 0.013, 0.002));
        patternLookupTable.add(Arrays.asList(1.000, 0.967, 0.557, 0.236, 0.080, 0.021, 0.005));
        patternLookupTable.add(Arrays.asList(0.921, 1.000, 0.630, 0.291, 0.107, 0.032, 0.007, 0.001));
        patternLookupTable.add(Arrays.asList(0.828, 1.000, 0.687, 0.343, 0.136, 0.044, 0.011, 0.002));
        patternLookupTable.add(Arrays.asList(0.752, 1.000, 0.744, 0.400, 0.171, 0.060, 0.017, 0.004));
        patternLookupTable.add(Arrays.asList(0.720, 1.000, 0.772, 0.428, 0.188, 0.068, 0.020, 0.005));
        patternLookupTable.add(Arrays.asList(0.667, 1.000, 0.825, 0.487, 0.228, 0.088, 0.028, 0.007));
        patternLookupTable.add(Arrays.asList(0.616, 1.000, 0.884, 0.556, 0.276, 0.113, 0.039, 0.010, 0.002));
        patternLookupTable.add(Arrays.asList(0.574, 1.000, 0.941, 0.628, 0.330, 0.143, 0.052, 0.015, 0.003));
        patternLookupTable.add(Arrays.asList(0.536, 0.999, 1.000, 0.706, 0.392, 0.179, 0.069, 0.022, 0.005));
        patternLookupTable.add(Arrays.asList(0.506, 0.972, 1.000, 0.725, 0.412, 0.193, 0.077, 0.025, 0.006));
        patternLookupTable.add(Arrays.asList(0.449, 0.919, 1.000, 0.764, 0.457, 0.226, 0.094, 0.033, 0.009, 0.001));
        patternLookupTable.add(Arrays.asList(0.392, 0.853, 1.000, 0.831, 0.543, 0.295, 0.136, 0.053, 0.017, 0.004));
        patternLookupTable.add(Arrays.asList(0.353, 0.812, 1.000, 0.869, 0.593, 0.336, 0.162, 0.067, 0.023, 0.006));
        patternLookupTable.add(Arrays.asList(0.321, 0.776, 1.000, 0.907, 0.644, 0.379, 0.190, 0.082, 0.030, 0.009));
        patternLookupTable.add(Arrays.asList(0.308, 0.760, 1.000, 0.924, 0.669, 0.401, 0.205, 0.090, 0.033, 0.011, 0.001));
        patternLookupTable.add(Arrays.asList(0.282, 0.729, 1.000, 0.962, 0.723, 0.451, 0.239, 0.110, 0.042, 0.014, 0.003));
        patternLookupTable.add(Arrays.asList(0.258, 0.699, 1.000, 1.000, 0.780, 0.504, 0.277, 0.132, 0.053, 0.018, 0.004));
        patternLookupTable.add(Arrays.asList(0.228, 0.645, 0.962, 1.000, 0.809, 0.542, 0.308, 0.153, 0.065, 0.023, 0.007));
        patternLookupTable.add(Arrays.asList(0.203, 0.598, 0.927, 1.000, 0.839, 0.581, 0.343, 0.176, 0.078, 0.029, 0.010));
        patternLookupTable.add(Arrays.asList(0.192, 0.577, 0.911, 1.000, 0.854, 0.602, 0.361, 0.189, 0.086, 0.033, 0.011));
        patternLookupTable.add(Arrays.asList(0.171, 0.536, 0.880, 1.000, 0.884, 0.644, 0.399, 0.216, 0.102, 0.040, 0.014, 0.003));
        patternLookupTable.add(Arrays.asList(0.154, 0.501, 0.851, 1.000, 0.912, 0.686, 0.439, 0.244, 0.120, 0.050, 0.018, 0.004));
        patternLookupTable.add(Arrays.asList(0.139, 0.468, 0.823, 1.000, 0.942, 0.730, 0.482, 0.278, 0.141, 0.062, 0.023, 0.007));
        patternLookupTable.add(Arrays.asList(0.126, 0.441, 0.799, 1.000, 0.969, 0.772, 0.524, 0.310, 0.162, 0.073, 0.028, 0.009));
        patternLookupTable.add(Arrays.asList(0.121, 0.427, 0.787, 1.000, 0.983, 0.794, 0.547, 0.328, 0.174, 0.080, 0.031, 0.011));
        patternLookupTable.add(Arrays.asList(0.104, 0.381, 0.732, 0.971, 1.000, 0.848, 0.614, 0.390, 0.219, 0.109, 0.045, 0.016, 0.004));
        patternLookupTable.add(Arrays.asList(0.092, 0.349, 0.691, 0.944, 1.000, 0.872, 0.648, 0.422, 0.244, 0.125, 0.054, 0.020, 0.006));
        patternLookupTable.add(Arrays.asList(0.082, 0.321, 0.654, 0.919, 1.000, 0.894, 0.682, 0.456, 0.270, 0.143, 0.063, 0.024, 0.008));
        patternLookupTable.add(Arrays.asList(0.073, 0.296, 0.620, 0.895, 1.000, 0.917, 0.718, 0.492, 0.299, 0.162, 0.077, 0.030, 0.011));
        patternLookupTable.add(Arrays.asList(0.069, 0.284, 0.604, 0.884, 1.000, 0.929, 0.735, 0.509, 0.313, 0.172, 0.084, 0.033, 0.012));
        patternLookupTable.add(Arrays.asList(0.062, 0.262, 0.573, 0.861, 1.000, 0.952, 0.772, 0.548, 0.345, 0.195, 0.098, 0.040, 0.015, 0.003));
        patternLookupTable.add(Arrays.asList(0.056, 0.243, 0.544, 0.839, 1.000, 0.976, 0.811, 0.589, 0.380, 0.220, 0.114, 0.049, 0.019, 0.005));
        patternLookupTable.add(Arrays.asList(0.051, 0.227, 0.521, 0.821, 1.000, 0.997, 0.846, 0.628, 0.413, 0.244, 0.130, 0.058, 0.022, 0.007));
        patternLookupTable.add(Arrays.asList(0.045, 0.206, 0.486, 0.786, 0.980, 1.000, 0.869, 0.660, 0.444, 0.268, 0.147, 0.070, 0.027, 0.010));
        patternLookupTable.add(Arrays.asList(0.042, 0.196, 0.468, 0.767, 0.968, 1.000, 0.879, 0.676, 0.460, 0.281, 0.156, 0.075, 0.030, 0.011));
        patternLookupTable.add(Arrays.asList(0.038, 0.179, 0.437, 0.733, 0.947, 1.000, 0.899, 0.705, 0.491, 0.307, 0.173, 0.086, 0.036, 0.013, 0.002));
        patternLookupTable.add(Arrays.asList(0.033, 0.163, 0.408, 0.701, 0.926, 1.000, 0.919, 0.736, 0.524, 0.335, 0.193, 0.099, 0.043, 0.016, 0.004));
        patternLookupTable.add(Arrays.asList(0.030, 0.149, 0.382, 0.670, 0.906, 1.000, 0.938, 0.768, 0.558, 0.364, 0.215, 0.113, 0.051, 0.020, 0.006));
        patternLookupTable.add(Arrays.asList(0.026, 0.132, 0.348, 0.629, 0.877, 1.000, 0.971, 0.823, 0.620, 0.420, 0.258, 0.143, 0.069, 0.028, 0.010));
        patternLookupTable.add(Arrays.asList(0.024, 0.126, 0.337, 0.616, 0.868, 1.000, 0.981, 0.839, 0.638, 0.437, 0.271, 0.153, 0.074, 0.031, 0.011));
        patternLookupTable.add(Arrays.asList(0.022, 0.116, 0.317, 0.592, 0.851, 1.000, 1.000, 0.872, 0.676, 0.472, 0.298, 0.172, 0.087, 0.037, 0.014, 0.002));
        patternLookupTable.add(Arrays.asList(0.020, 0.106, 0.294, 0.561, 0.822, 0.983, 1.000, 0.888, 0.700, 0.498, 0.320, 0.188, 0.099, 0.043, 0.017, 0.004));
        patternLookupTable.add(Arrays.asList(0.017, 0.096, 0.272, 0.529, 0.790, 0.965, 1.000, 0.905, 0.727, 0.526, 0.346, 0.207, 0.113, 0.050, 0.020, 0.006));
        patternLookupTable.add(Arrays.asList(0.015, 0.087, 0.251, 0.499, 0.761, 0.946, 1.000, 0.922, 0.755, 0.556, 0.373, 0.227, 0.126, 0.061, 0.024, 0.008));
        patternLookupTable.add(Arrays.asList(0.014, 0.083, 0.242, 0.486, 0.747, 0.937, 1.000, 0.930, 0.768, 0.570, 0.385, 0.237, 0.134, 0.065, 0.026, 0.009));
        patternLookupTable.add(Arrays.asList(0.013, 0.075, 0.225, 0.459, 0.720, 0.920, 1.000, 0.947, 0.796, 0.602, 0.415, 0.260, 0.149, 0.075, 0.032, 0.012, 0.001));
        patternLookupTable.add(Arrays.asList(0.012, 0.069, 0.208, 0.435, 0.695, 0.904, 1.000, 0.963, 0.824, 0.633, 0.443, 0.284, 0.165, 0.085, 0.037, 0.015, 0.002));
        patternLookupTable.add(Arrays.asList(0.010, 0.063, 0.194, 0.412, 0.669, 0.888, 1.000, 0.980, 0.852, 0.667, 0.475, 0.309, 0.184, 0.098, 0.044, 0.018, 0.005));
        patternLookupTable.add(Arrays.asList(0.009, 0.057, 0.180, 0.391, 0.646, 0.872, 1.000, 0.997, 0.882, 0.702, 0.509, 0.336, 0.204, 0.113, 0.052, 0.021, 0.006));
        patternLookupTable.add(Arrays.asList(0.009, 0.054, 0.173, 0.379, 0.631, 0.861, 0.995, 1.000, 0.892, 0.717, 0.523, 0.350, 0.214, 0.119, 0.057, 0.023, 0.008));
        patternLookupTable.add(Arrays.asList(0.008, 0.049, 0.160, 0.355, 0.602, 0.834, 0.980, 1.000, 0.906, 0.739, 0.548, 0.373, 0.231, 0.132, 0.066, 0.026, 0.010));
        patternLookupTable.add(Arrays.asList(0.007, 0.042, 0.141, 0.321, 0.557, 0.791, 0.953, 1.000, 0.931, 0.781, 0.596, 0.417, 0.268, 0.158, 0.082, 0.037, 0.014, 0.002));
        patternLookupTable.add(Arrays.asList(0.006, 0.038, 0.130, 0.301, 0.531, 0.767, 0.939, 1.000, 0.945, 0.805, 0.624, 0.443, 0.289, 0.174, 0.093, 0.043, 0.017, 0.004));
        patternLookupTable.add(Arrays.asList(0.005, 0.035, 0.120, 0.283, 0.507, 0.744, 0.925, 1.000, 0.960, 0.830, 0.653, 0.470, 0.312, 0.191, 0.106, 0.051, 0.020, 0.006));
        patternLookupTable.add(Arrays.asList(0.005, 0.033, 0.115, 0.274, 0.495, 0.732, 0.918, 1.000, 0.967, 0.842, 0.668, 0.485, 0.324, 0.200, 0.112, 0.054, 0.023, 0.007));
        patternLookupTable.add(Arrays.asList(0.004, 0.030, 0.107, 0.257, 0.472, 0.710, 0.904, 1.000, 0.982, 0.868, 0.699, 0.515, 0.351, 0.219, 0.126, 0.063, 0.027, 0.010));
        patternLookupTable.add(Arrays.asList(0.004, 0.027, 0.098, 0.242, 0.450, 0.689, 0.890, 1.000, 0.997, 0.894, 0.731, 0.547, 0.378, 0.241, 0.141, 0.072, 0.032, 0.012, 0.002));
        patternLookupTable.add(Arrays.asList(0.003, 0.025, 0.090, 0.224, 0.426, 0.661, 0.867, 0.989, 1.000, 0.911, 0.756, 0.574, 0.402, 0.260, 0.155, 0.082, 0.037, 0.014, 0.003));
        patternLookupTable.add(Arrays.asList(0.003, 0.022, 0.082, 0.208, 0.402, 0.633, 0.843, 0.975, 1.000, 0.925, 0.777, 0.598, 0.425, 0.279, 0.169, 0.092, 0.043, 0.017, 0.005));
        patternLookupTable.add(Arrays.asList(0.003, 0.021, 0.079, 0.202, 0.392, 0.621, 0.833, 0.969, 1.000, 0.930, 0.786, 0.609, 0.435, 0.288, 0.176, 0.097, 0.046, 0.018, 0.006));
        patternLookupTable.add(Arrays.asList(0.003, 0.019, 0.073, 0.188, 0.370, 0.595, 0.810, 0.955, 1.000, 0.943, 0.808, 0.634, 0.460, 0.309, 0.191, 0.108, 0.053, 0.022, 0.007));
        patternLookupTable.add(Arrays.asList(0.002, 0.017, 0.067, 0.175, 0.350, 0.570, 0.787, 0.942, 1.000, 0.956, 0.831, 0.662, 0.487, 0.331, 0.209, 0.121, 0.062, 0.026, 0.010));
        patternLookupTable.add(Arrays.asList(0.002, 0.016, 0.061, 0.163, 0.330, 0.547, 0.765, 0.929, 1.000, 0.968, 0.855, 0.690, 0.515, 0.356, 0.227, 0.135, 0.070, 0.031, 0.012, 0.002));
        patternLookupTable.add(Arrays.asList(0.002, 0.014, 0.056, 0.151, 0.312, 0.524, 0.743, 0.916, 1.000, 0.982, 0.878, 0.718, 0.544, 0.382, 0.247, 0.149, 0.079, 0.037, 0.014, 0.003));
        patternLookupTable.add(Arrays.asList(0.002, 0.013, 0.054, 0.146, 0.304, 0.514, 0.733, 0.909, 1.000, 0.989, 0.890, 0.733, 0.559, 0.395, 0.257, 0.156, 0.084, 0.039, 0.016, 0.004));
        patternLookupTable.add(Arrays.asList(0.001, 0.012, 0.047, 0.131, 0.276, 0.478, 0.697, 0.881, 0.989, 1.000, 0.920, 0.777, 0.605, 0.437, 0.292, 0.182, 0.102, 0.051, 0.022, 0.007));
        patternLookupTable.add(Arrays.asList(0.001, 0.010, 0.043, 0.121, 0.259, 0.454, 0.671, 0.859, 0.977, 1.000, 0.932, 0.797, 0.629, 0.460, 0.312, 0.197, 0.114, 0.058, 0.025, 0.008, 0.001));

        return patternLookupTable.get(mass);
    }
}
